{
	"info": {
		"_postman_id": "24c70060-c89c-42bb-b89e-7546ed75b06c",
		"name": "feature-comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "33495395"
	},
	"item": [
		{
			"name": "Create comment with not found event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 404\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"}\r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"my fitst comment!\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment with empty body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статус должен быть 400\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(400) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": ""
						},
						{
							"key": "event-id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment with empty text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статус должен быть 400\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(400) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"async function main() {\r",
							"\r",
							"async function createUser() {\r",
							"    const echoPostUserRequest = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'user', email: \"myemail@google.com\" })\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(echoPostUserRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"});\r",
							"}\r",
							"\r",
							"async function creatCategory() {\r",
							"    const echoPostCategoryRequest = {\r",
							"  url: 'http://localhost:8080/admin/categories',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'category'})\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(echoPostCategoryRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"});\r",
							"}\r",
							"\r",
							"\r",
							"async function creatEvent() {\r",
							"    const echoPostEventRequest = {\r",
							"  url: 'http://localhost:8080/users/1/events',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ annotation: 'myannotation fjoisjdiofjosidlkfsdgjsdg', description: \"mydescription about isdkjdofskjdfioksaodkfiodj\", eventDate: \"2024-12-21 15:43:00\", title: \"great event!\" })\r",
							"  }\r",
							"};\r",
							"\r",
							"pm.sendRequest(echoPostEventRequest, function (err, res) {\r",
							"  console.log(err ? err : res.json());\r",
							"});\r",
							"}\r",
							"    try{\r",
							"        await createUser();\r",
							"        await creatEvent();\r",
							"        await creatCategory();\r",
							"    \r",
							"    } catch(err) {\r",
							"        console.error(\"Ошибка при подготовке тестовых данных.\", err);\r",
							"    }\r",
							"\r",
							"}\r",
							"const interval = setInterval(() => {}, 1000);\r",
							"\r",
							"setTimeout(async () => \r",
							"    {\r",
							"        try {\r",
							"            await main();\r",
							"        } catch (e) {\r",
							"            console.error(e);\r",
							"        } finally {\r",
							"            clearInterval(interval);\r",
							"        }\r",
							"    },  \r",
							"    100 \r",
							");\r",
							"\r",
							"const sendRequest = (req) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(req, (err, res) => {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return reject(err);\r",
							"            }\r",
							"            resolve(res);\r",
							"        });\r",
							"    });\r",
							"};\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 200 и данные формата json\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"}\r",
							");\r",
							"const target = pm.response.json();"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"my fitst comment!\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"   \r",
					"   \r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}