{
	"info": {
		"_postman_id": "9f714527-c2a1-4c5c-81d4-e16c021ae204",
		"name": "feature-comments",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "34658675"
	},
	"item": [
		{
			"name": "Create comment with not found event",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 404\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(404);\r",
							"}\r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"packages": {},
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"my fitst comment!\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "13"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment with empty body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статус должен быть 400\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(400) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\":\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": ""
						},
						{
							"key": "event-id",
							"value": ""
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment with empty text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код статус должен быть 400\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(400) \r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Create comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"   const echoPostUserRequest = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'new user', email: \"myemail@google.com\" })\r",
							"        }\r",
							"   }\r",
							"\r",
							"    const echoPostCategoryRequest = {\r",
							"    url: 'http://localhost:8080/admin/categories',\r",
							"    method: 'POST',\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ name: 'category'})\r",
							"        }\r",
							"    }\r",
							"\r",
							"\r",
							"   const echoPostEventRequest = {\r",
							"  url: 'http://localhost:8080/users/1/events',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ annotation: 'myannotation fjoisjdiofjosidlkfsdgjsdg', description: \"mydescription about isdkjdofskjdfioksaodkfiodj\", eventDate: \"2024-12-21 15:43:00\", title: \"great event!\", category: 1 })\r",
							"        }\r",
							"   }\r",
							"\r",
							"   const sendRequest = (req) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(req, (err, res) => {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return reject(err);\r",
							"            }\r",
							"            resolve(res);\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"\r",
							"   const publishEvent = {\r",
							"  url: 'http://localhost:8080/admin/events/1',\r",
							"  method: 'PATCH',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ stateAction: 'PUBLISHED' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"\r",
							"const userResp = await sendRequest(echoPostUserRequest);\r",
							"const categoryResp = await sendRequest(echoPostCategoryRequest);\r",
							"const eventResp = await sendRequest(echoPostEventRequest);\r",
							"const publishEventResp = await sendRequest(publishEvent);\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 201 и данные формата json\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(201);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: text, author, event, timestamp\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('text');\r",
							"    pm.expect(pm.response.json()).to.have.property('author');\r",
							"    pm.expect(pm.response.json()).to.have.property('event');\r",
							"    pm.expect(pm.response.json()).to.have.property('timestamp');\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\": \"my fitst comment!\" \r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/event/:event-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"event",
						":event-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "event-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment with id = 2",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"   const echoPostUserRequest = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'user', email: \"myemail0021@google.com\" })\r",
							"        }\r",
							"   }\r",
							"\r",
							"    const echoPostCategoryRequest = {\r",
							"    url: 'http://localhost:8080/admin/categories',\r",
							"    method: 'POST',\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ name: 'new category'})\r",
							"        }\r",
							"    }\r",
							"\r",
							"\r",
							"   const echoPostEventRequest = {\r",
							"  url: 'http://localhost:8080/users/1/events',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ annotation: 'myannotation fjoisjdiofjosidlkfsdgjsdg', description: \"mydescription about isdkjdofskjdfioksaodkfiodj\", eventDate: \"2024-12-21 15:43:00\", title: \"second event!\", category: 1 })\r",
							"        }\r",
							"   }\r",
							"\r",
							"   const sendRequest = (req) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(req, (err, res) => {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return reject(err);\r",
							"            }\r",
							"            resolve(res);\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"\r",
							"   const publishEvent = {\r",
							"  url: 'http://localhost:8080/admin/events/1',\r",
							"  method: 'PATCH',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ stateAction: 'PUBLISHED' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"  const commentReq = {\r",
							"  url: 'http://localhost:8080/comments/1/event/1',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ text: 'first point about event' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"\r",
							"const userResp = await sendRequest(echoPostUserRequest);\r",
							"const categoryResp = await sendRequest(echoPostCategoryRequest);\r",
							"const eventResp = await sendRequest(echoPostEventRequest);\r",
							"const publishEventResp = await sendRequest(publishEvent);\r",
							"const commentResp = await sendRequest(commentReq);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 200 и данные формата json\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: text, author, event, timestamp\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('text');\r",
							"    pm.expect(pm.response.json()).to.have.property('author');\r",
							"    pm.expect(pm.response.json()).to.have.property('event');\r",
							"    pm.expect(pm.response.json()).to.have.property('timestamp');\r",
							"});\r",
							"\r",
							"pm.test(\"text должен быть 'new text!'\", function() {\r",
							"    pm.expect(pm.response.json().text).to.be.equal('new text!');\r",
							"\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"new text!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/comment/:comment-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"comment",
						":comment-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "comment-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment without text",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 400\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(400);\r",
							"}\r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/comment/:comment-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"comment",
						":comment-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "1"
						},
						{
							"key": "comment-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Patch comment with id = 2 by not author comment",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"   const echoPostUserRequest = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'user1', email: \"myemail10021@google.com\" })\r",
							"        }\r",
							"   }\r",
							"\r",
							"    const echoPostCategoryRequest = {\r",
							"    url: 'http://localhost:8080/admin/categories',\r",
							"    method: 'POST',\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ name: 'new category'})\r",
							"        }\r",
							"    }\r",
							"\r",
							"\r",
							"   const echoPostEventRequest = {\r",
							"  url: 'http://localhost:8080/users/1/events',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ annotation: 'myannotation fjoisjdiofjosidlkfsdgjsdg23', description: \"mydescription about isdkjdofskjdfioksaodkfiodj\", eventDate: \"2024-12-21 15:43:00\", title: \"second event!\", category: 1 })\r",
							"        }\r",
							"   }\r",
							"\r",
							"   const sendRequest = (req) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(req, (err, res) => {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return reject(err);\r",
							"            }\r",
							"            resolve(res);\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"\r",
							"   const publishEvent = {\r",
							"  url: 'http://localhost:8080/admin/events/1',\r",
							"  method: 'PATCH',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ stateAction: 'PUBLISHED' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"  const commentReq = {\r",
							"  url: 'http://localhost:8080/comments/1/event/1',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ text: 'first point about event' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"    const echoPostUserRequestNew = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'user2', email: \"myemail10021@google.com\" })\r",
							"        }\r",
							"   }\r",
							"\r",
							"\r",
							"const userResp = await sendRequest(echoPostUserRequest);\r",
							"const categoryResp = await sendRequest(echoPostCategoryRequest);\r",
							"const eventResp = await sendRequest(echoPostEventRequest);\r",
							"const publishEventResp = await sendRequest(publishEvent);\r",
							"const commentResp = await sendRequest(commentReq);\r",
							"const userRespNew = await sendRequest(echoPostUserRequestNew);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 403 и данные формата json\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(403);\r",
							"}\r",
							");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"text\" : \"let patch our comment!\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/comments/:user-id/comment/:comment-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":user-id",
						"comment",
						":comment-id"
					],
					"variable": [
						{
							"key": "user-id",
							"value": "2"
						},
						{
							"key": "comment-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Get comment with id = 1",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test( \"Ответ должен содержать код статуса 200 и данные формата json\", function() {\r",
							"    pm.expect(pm.response.code).to.equal(200);\r",
							"    pm.response.to.be.withBody;\r",
							"    pm.response.to.be.json;\r",
							"\r",
							"}\r",
							");\r",
							"\r",
							"pm.test(\"Ответ должен содержать поля: text, author, event, timestamp\", function () {\r",
							"    pm.expect(pm.response.json()).to.have.property('text');\r",
							"    pm.expect(pm.response.json()).to.have.property('author');\r",
							"    pm.expect(pm.response.json()).to.have.property('event');\r",
							"    pm.expect(pm.response.json()).to.have.property('timestamp');\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Текст: new text!\", function () {\r",
							"    pm.expect(pm.response.json().text).to.be.eq('new text!');\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"\r",
							"   const echoPostUserRequest = {\r",
							"  url: 'http://localhost:8080/admin/users',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ name: 'user1', email: \"myemail10021@google.com\" })\r",
							"        }\r",
							"   }\r",
							"\r",
							"    const echoPostCategoryRequest = {\r",
							"    url: 'http://localhost:8080/admin/categories',\r",
							"    method: 'POST',\r",
							"    header: { \"Content-Type\": \"application/json\" },\r",
							"    body: {\r",
							"        mode: 'raw',\r",
							"        raw: JSON.stringify({ name: 'new category'})\r",
							"        }\r",
							"    }\r",
							"\r",
							"\r",
							"   const echoPostEventRequest = {\r",
							"  url: 'http://localhost:8080/users/1/events',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ annotation: 'myannotation fjoisjdiofjosidlkfsdgjsdg23', description: \"mydescription about isdkjdofskjdfioksaodkfiodj\", eventDate: \"2024-12-21 15:43:00\", title: \"second event!\", category: 1 })\r",
							"        }\r",
							"   }\r",
							"\r",
							"   const sendRequest = (req) => {\r",
							"    return new Promise((resolve, reject) => {\r",
							"        pm.sendRequest(req, (err, res) => {\r",
							"            if (err) {\r",
							"                console.log(err);\r",
							"                return reject(err);\r",
							"            }\r",
							"            resolve(res);\r",
							"        });\r",
							"    });\r",
							"};\r",
							"\r",
							"\r",
							"   const publishEvent = {\r",
							"  url: 'http://localhost:8080/admin/events/1',\r",
							"  method: 'PATCH',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ stateAction: 'PUBLISHED' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"   const commentReq = {\r",
							"  url: 'http://localhost:8080/comments/1/event/1',\r",
							"  method: 'POST',\r",
							"  header: { \"Content-Type\": \"application/json\" },\r",
							"  body: {\r",
							"    mode: 'raw',\r",
							"    raw: JSON.stringify({ text: 'new text!' })\r",
							"        }\r",
							"   }\r",
							"\r",
							"const userResp = await sendRequest(echoPostUserRequest);\r",
							"const categoryResp = await sendRequest(echoPostCategoryRequest);\r",
							"const eventResp = await sendRequest(echoPostEventRequest);\r",
							"const publishEventResp = await sendRequest(publishEvent);\r",
							"const commentResp = await sendRequest(commentReq);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments/:comment-id",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments",
						":comment-id"
					],
					"variable": [
						{
							"key": "comment-id",
							"value": "1"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "New Request",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/comments",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"comments"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"   "
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					"\r",
					"   \r",
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080"
		}
	]
}